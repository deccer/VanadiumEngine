#version 450 core

#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, rgba32f) uniform writeonly image2D transmittanceLUT;

const float pi = 3.14159265359;
const float pi3 = pi * pi * pi;
const uint nSamples = 40;

layout(push_constant) uniform Constants {
	ivec4 lutSize;
	vec4 betaExtinctionZeroMie;
	vec4 betaExtinctionZeroRayleigh;
	vec4 absorptionZeroOzone;
	float heightScaleRayleigh;
	float heightScaleMie;
	float layerHeightOzone;
	float layer0ConstantFactorOzone;
	float layer1ConstantFactorOzone;
	float heightRangeOzone;
	float maxHeight;
	float groundRadius;
};

#include "functions/transmittance-compute.glsl"

void main() {
	ivec2 imageCoordinate = ivec2(gl_LocalInvocationID.xy) + ivec2(gl_WorkGroupID.xy) * ivec2(gl_WorkGroupSize.xy);
	vec2 normalizedCoordinates = imageCoordinate / vec2(lutSize.xy);

	float startHeight, cosTheta;
	uvToHeightCosTheta(normalizedCoordinates, startHeight, cosTheta);
	vec2 direction = vec2(sqrt(1.0f - cosTheta * cosTheta), cosTheta);

	float tGround = nearestDistanceToSphere(startHeight, direction, groundRadius);
	float endPosT = nearestDistanceToSphere(startHeight, direction, groundRadius + maxHeight);
	
	if(tGround > 0.0f)
		endPosT = min(endPosT, tGround);

	if(imageCoordinate.x < lutSize.x && imageCoordinate.y < lutSize.y) {
		imageStore(transmittanceLUT, imageCoordinate, vec4(calcTransmittance(vec2(0.0f, startHeight), direction, endPosT / nSamples), 1.0f));
	}
}